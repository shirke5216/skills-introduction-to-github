import requests
from PIL import Image, ImageTk
from io import BytesIO
import tkinter as tk
from tkinter import messagebox, filedialog

# List to store history of generated QR codes' data
history = []

# Function to generate QR code using goqr.me API
def generate_qr_code():
    # Get the user input from the entry widget
    data = entry.get()

    if not data:
        messagebox.showerror("Input Error", "Please enter some data to generate QR code")
        return

    # API URL for generating QR code
    url = f"https://api.qrserver.com/v1/create-qr-code/?data={data}&size=200x200"

    # Send GET request to the API
    response = requests.get(url)

    # Check if request was successful
    if response.status_code == 200:
        # Convert the response content to an image
        img = Image.open(BytesIO(response.content))

        # Convert the image to a format compatible with Tkinter (ImageTk)
        img_tk = ImageTk.PhotoImage(img)

        # Update the label to display the QR code image
        qr_code_label.config(image=img_tk)
        qr_code_label.image = img_tk  # Keep a reference to avoid garbage collection

        # Optionally, save the image to a file
        img.save("qr_code.png")
        messagebox.showinfo("Success", "QR Code generated and saved as 'qr_code.png'")

        # Add the generated data to history and update history buttons
        if data not in history:
            history.append(data)
            update_history_buttons()

    else:
        messagebox.showerror("Error", f"Unable to generate QR code (Status code: {response.status_code})")

# Function to save the generated QR code to a user-specified location
def save_qr_code():
    if qr_code_label.image is None:
        messagebox.showerror("Error", "No QR code to save.")
        return

    # Ask the user for the save location and file name
    file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG files", "*.png")])

    if file_path:
        # Save the image
        qr_code_label.image.save(file_path)
        messagebox.showinfo("Success", f"QR Code saved as '{file_path}'")

# Function to update the history buttons
def update_history_buttons():
    # Clear any existing history buttons
    for button in history_frame.winfo_children():
        button.destroy()

    # Create a button for each item in the history list
    for index, item in enumerate(reversed(history[-5:])):  # Only show the latest 5 entries
        button = tk.Button(history_frame, text=item, fg="red", bg="black", font=("Arial", 10), command=lambda item=item: load_from_history(item))
        button.pack(fill=tk.X, pady=2)

# Function to load selected history into the input box
def load_from_history(data):
    entry.delete(0, tk.END)  # Clear the entry
    entry.insert(0, data)  # Insert selected data into entry

# Set up the GUI window with black background
root = tk.Tk()
root.title("QR Code Generator")
root.config(bg="black")  # Set background color to black

# Create and place a label for instructions (red text)
label = tk.Label(root, text="Enter data to generate QR code:", fg="red", bg="black", font=("Arial", 12))
label.pack(pady=10)

# Create and place an entry widget (red text)
entry = tk.Entry(root, width=40, fg="red", bg="black", font=("Arial", 12))
entry.pack(pady=5)

# Create and place a button to generate the QR code (red text)
generate_button = tk.Button(root, text="Generate QR Code", command=generate_qr_code, fg="red", bg="black", font=("Arial", 12))
generate_button.pack(pady=10)

# Create a label to display the generated QR code
qr_code_label = tk.Label(root, bg="black")
qr_code_label.pack(pady=20)

# Create a button to save the QR code (red text)
save_button = tk.Button(root, text="Save QR Code", command=save_qr_code, fg="red", bg="black", font=("Arial", 12))
save_button.pack(pady=10)

# Create a frame for the history section (top-right corner)
history_frame = tk.Frame(root, bg="black")
history_frame.place(relx=1.0, rely=0.0, anchor="ne", x=-10, y=10)  # Position at top-right corner with offset

# Label for history section
history_label = tk.Label(history_frame, text="History", fg="red", bg="black", font=("Arial", 12))
history_label.pack(pady=5)

# Run the GUI application
root.mainloop()
